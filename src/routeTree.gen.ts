/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MyDocumentsImport } from './routes/my-documents'
import { Route as KnowledgeBaseImport } from './routes/knowledge-base'
import { Route as AuthImport } from './routes/auth'
import { Route as ActsImport } from './routes/acts'
import { Route as IndexImport } from './routes/index'
import { Route as AnalyzeIdImport } from './routes/analyze.$id'

// Create/Update Routes

const MyDocumentsRoute = MyDocumentsImport.update({
  id: '/my-documents',
  path: '/my-documents',
  getParentRoute: () => rootRoute,
} as any)

const KnowledgeBaseRoute = KnowledgeBaseImport.update({
  id: '/knowledge-base',
  path: '/knowledge-base',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const ActsRoute = ActsImport.update({
  id: '/acts',
  path: '/acts',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AnalyzeIdRoute = AnalyzeIdImport.update({
  id: '/analyze/$id',
  path: '/analyze/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/acts': {
      id: '/acts'
      path: '/acts'
      fullPath: '/acts'
      preLoaderRoute: typeof ActsImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/knowledge-base': {
      id: '/knowledge-base'
      path: '/knowledge-base'
      fullPath: '/knowledge-base'
      preLoaderRoute: typeof KnowledgeBaseImport
      parentRoute: typeof rootRoute
    }
    '/my-documents': {
      id: '/my-documents'
      path: '/my-documents'
      fullPath: '/my-documents'
      preLoaderRoute: typeof MyDocumentsImport
      parentRoute: typeof rootRoute
    }
    '/analyze/$id': {
      id: '/analyze/$id'
      path: '/analyze/$id'
      fullPath: '/analyze/$id'
      preLoaderRoute: typeof AnalyzeIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/acts': typeof ActsRoute
  '/auth': typeof AuthRoute
  '/knowledge-base': typeof KnowledgeBaseRoute
  '/my-documents': typeof MyDocumentsRoute
  '/analyze/$id': typeof AnalyzeIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/acts': typeof ActsRoute
  '/auth': typeof AuthRoute
  '/knowledge-base': typeof KnowledgeBaseRoute
  '/my-documents': typeof MyDocumentsRoute
  '/analyze/$id': typeof AnalyzeIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/acts': typeof ActsRoute
  '/auth': typeof AuthRoute
  '/knowledge-base': typeof KnowledgeBaseRoute
  '/my-documents': typeof MyDocumentsRoute
  '/analyze/$id': typeof AnalyzeIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/acts'
    | '/auth'
    | '/knowledge-base'
    | '/my-documents'
    | '/analyze/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/acts'
    | '/auth'
    | '/knowledge-base'
    | '/my-documents'
    | '/analyze/$id'
  id:
    | '__root__'
    | '/'
    | '/acts'
    | '/auth'
    | '/knowledge-base'
    | '/my-documents'
    | '/analyze/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActsRoute: typeof ActsRoute
  AuthRoute: typeof AuthRoute
  KnowledgeBaseRoute: typeof KnowledgeBaseRoute
  MyDocumentsRoute: typeof MyDocumentsRoute
  AnalyzeIdRoute: typeof AnalyzeIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActsRoute: ActsRoute,
  AuthRoute: AuthRoute,
  KnowledgeBaseRoute: KnowledgeBaseRoute,
  MyDocumentsRoute: MyDocumentsRoute,
  AnalyzeIdRoute: AnalyzeIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/acts",
        "/auth",
        "/knowledge-base",
        "/my-documents",
        "/analyze/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/acts": {
      "filePath": "acts.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/knowledge-base": {
      "filePath": "knowledge-base.tsx"
    },
    "/my-documents": {
      "filePath": "my-documents.tsx"
    },
    "/analyze/$id": {
      "filePath": "analyze.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
